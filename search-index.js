var searchIndex = JSON.parse('{\
"elastic_elgamal":{"doc":"ElGamal encryption and related cryptographic protocols …","t":"DNDDDDNNNDNDDDDEDDDCDDDELLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMDENNDDNNQIDEDNDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNENNNNDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDSQIDIDDSQILLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLKLLLKLLLLLKLLLLLLLKLLLLLLKLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDENNNNDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["CandidateDecryption","ChallengeMismatch","Ciphertext","CiphertextWithValue","CommitmentEquivalenceProof","DiscreteLogTable","IdentityKey","InvalidByteSize","InvalidGroupElement","Keypair","LenMismatch","LogEqualityProof","PreparedRange","ProofOfPossession","PublicKey","PublicKeyConversionError","RangeDecomposition","RangeProof","RingProof","RingProofBuilder","SecretKey","SumOfSquaresProof","VerifiableDecryption","VerificationError","add","add","add","add_assign","add_assign","app","as_bytes","as_element","as_element","blinded_element","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","decomposition","decrypt","decrypt","decrypt_to_element","decrypt_to_element","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dkg","drop","encrypt","encrypt_bool","encrypt_element","encrypt_range","encrypt_zero","eq","eq","expose_scalar","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_ciphertext","generalize","generate","generate","get","group","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_tuple","into_unchecked","mul","mul","mul","mul","mul","mul","mul","neg","new","new","new","new","new","new","new","new","non_blinded","optimal","proof_size","public","random_element","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","sharing","sub","sub","sub_assign","sub_assign","to_bytes","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upper_bound","verify","verify","verify","verify","verify","verify","verify_bool","verify_range","verify_zero","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zero","actual","collection","expected","ChoiceParams","ChoiceVerificationError","CreditEquivalence","CreditRange","EncryptedChoice","MultiChoice","OptionsLenMismatch","OptionsLenMismatch","Proof","ProveSum","QuadraticVotingBallot","QuadraticVotingError","QuadraticVotingParams","Range","SingleChoice","Sum","Variant","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","choices_unchecked","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","credits","deserialize","deserialize","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","len","max_votes","multi","new","new","new","options_count","options_count","range_proof","receiver","receiver","serialize","serialize","set_max_votes","single","single","source","source","sum_proof","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","actual","expected","actual","error","expected","index","DuplicateShare","Error","InconsistentPublicShares","InvalidCommitment","InvalidSecret","MalformedParticipantProof","Opening","ParticipantCollectingCommitments","ParticipantCollectingPolynomials","ParticipantExchangingSecrets","PublicInfo","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","commitment","complete","deserialize","deserialize","deserialize","deserialize","deserialize","finish_commitment_phase","finish_polynomials_phase","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","index","index","index","insert_commitment","insert_public_polynomial","insert_secret_share","into","into","into","into","into","into","into_owned","missing_commitments","missing_public_polynomials","missing_shares","new","opening","params","params","params","polynomial","proof_of_possession","public_info","secret_share_for_participant","serialize","serialize","serialize","serialize","serialize","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Curve25519Subgroup","ELEMENT_SIZE","Element","ElementOps","Generic","Group","RandomBytesProvider","Ristretto","SCALAR_SIZE","Scalar","ScalarOps","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deserialize_element","deserialize_element","deserialize_element","deserialize_element","deserialize_scalar","deserialize_scalar","deserialize_scalar","deserialize_scalar","eq","eq","equivalent","equivalent","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","from","generate_scalar","generate_scalar","generate_scalar","generate_scalar","generator","generator","generator","generator","hash","hash","identity","identity","identity","identity","into","into","into","into","invert_scalar","invert_scalar","invert_scalar","invert_scalar","invert_scalars","invert_scalars","invert_scalars","is_identity","is_identity","is_identity","is_identity","mul_generator","mul_generator","mul_generator","multi_mul","multi_mul","multi_mul","scalar_from_random_bytes","scalar_from_random_bytes","scalar_from_random_bytes","serialize_element","serialize_element","serialize_element","serialize_element","serialize_scalar","serialize_scalar","serialize_scalar","serialize_scalar","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vartime_double_mul_generator","vartime_double_mul_generator","vartime_double_mul_generator","vartime_mul_generator","vartime_mul_generator","vartime_mul_generator","vartime_multi_mul","vartime_multi_mul","vartime_multi_mul","vzip","vzip","vzip","vzip","ActiveParticipant","Dealer","Error","InvalidDealerProof","InvalidSecret","MalformedDealerPolynomial","MalformedParticipantKeys","Params","ParticipantCountMismatch","PublicKeySet","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","combine_shares","decrypt_share","deserialize","deserialize","deserialize","deserialize","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_participants","index","into","into","into","into","into","key_set","new","new","new","new","params","participant_key","participant_keys","proof_of_possession","public_info","public_key_share","secret_share","secret_share_for_participant","serialize","serialize","serialize","serialize","shared_key","shares","source","threshold","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","verify_participant","verify_share","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"elastic_elgamal"],[350,"elastic_elgamal::VerificationError"],[353,"elastic_elgamal::app"],[489,"elastic_elgamal::app::ChoiceVerificationError"],[491,"elastic_elgamal::app::QuadraticVotingError"],[495,"elastic_elgamal::dkg"],[611,"elastic_elgamal::group"],[731,"elastic_elgamal::sharing"],[833,"core::clone"],[834,"core::option"],[835,"serde::de"],[836,"core::result"],[837,"rand_core"],[838,"rand_core"],[839,"core::fmt"],[840,"merlin::transcript"],[841,"core::marker"],[842,"core::iter::traits::collect"],[843,"core::iter::traits::iterator"],[844,"serde::ser"],[845,"alloc::vec"],[846,"alloc::string"],[847,"core::any"],[848,"core::error"],[849,"core::hash"],[850,"curve25519_dalek::scalar"]],"d":["Candidate for a <code>VerifiableDecryption</code> that is not yet …","Restored challenge scalar does not match the one provided …","Ciphertext for ElGamal encryption.","ElGamal <code>Ciphertext</code> together with fully retained …","Zero-knowledge proof that an ElGamal ciphertext encrypts …","Lookup table for discrete logarithms.","Underlying group element is the group identity.","Invalid size of the byte buffer.","Byte buffer has correct size, but does not represent a …","Keypair for ElGamal encryption and related protocols, …","A collection (e.g., number of responses in a <code>RingProof</code>) …","Zero-knowledge proof of equality of two discrete …","<code>RangeDecomposition</code> together with values precached for …","Zero-knowledge proof of possession of one or more secret …","Public key for ElGamal encryption and related protocols.","Errors that can occur when converting other types to …","Decomposition of an integer range <code>0..n</code> into one or more …","Zero-knowledge proof that an ElGamal ciphertext encrypts a …","Zero-knowledge proof that the one or more encrypted values …","","Secret key for ElGamal encryption and related protocols. …","Zero-knowledge proof that an ElGamal-encrypted value is …","Verifiable decryption for a certain <code>Ciphertext</code> in the …","Error verifying base proofs, such as <code>RingProof</code>, …","","","","","","High-level applications for proofs defined in this crate.","Returns bytes representing the group element corresponding …","Returns the group element equivalent to this key.","Returns the group element encapsulated in this decryption.","Returns a reference to the blinded element.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the contained decomposition.","Decrypts the provided ciphertext and returns the original …","Decrypts the provided ciphertext and returns the original …","Decrypts the provided ciphertext and returns the produced …","Decrypts the provided ciphertext and returns the produced …","","","","","","","","","","","","","Committed Pedersen’s distributed key generation (DKG).","","Encrypts a value for this key.","Encrypts a boolean value (0 or 1) and provides a …","Encrypts a group element.","Encrypts <code>value</code> and provides a zero-knowledge proof that it …","Encrypts zero value and provides a zero-knowledge proof of …","","","Exposes the scalar equivalent to this key.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a secret key from bytes. If bytes do not …","Deserializes a public key from bytes.","Deserializes decryption data from <code>bytes</code>. Returns <code>None</code> if …","Attempts to parse the proof from <code>bytes</code>. Returns <code>None</code> if …","Attempts to deserialize a proof from bytes. Returns <code>None</code> …","Creates a proof that a value in <code>ciphertext</code> is in the <code>range</code>.","Converts the enclosed value into a scalar.","Generates a random secret key.","Generates a random keypair.","Gets the discrete log of <code>decrypted_element</code>, or <code>None</code> if it …","Traits and implementations for prime-order groups in which …","Returns a reference to the contained <code>Ciphertext</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns public and secret keys comprising this keypair.","Converts this candidate decryption into a …","","","","","","","","","Creates a decryption for the specified <code>ciphertext</code> under …","Creates a lookup table for the specified <code>values</code>.","Encrypts a value for the specified receiver.","Creates a proof based on the <code>ciphertext</code> for <code>receiver</code> and …","Creates a new proof.","Creates a new proof that squares of values encrypted in …","Creates a proof of possession with the specified <code>keypairs</code>.","Encrypts <code>value</code> for <code>receiver</code> and creates a zero-knowledge …","Creates a non-blinded encryption of the specified scalar …","Finds an optimal decomposition of the range with the given …","Returns the size of <code>RangeProof</code>s using this decomposition, …","Returns the public part of this keypair.","Returns a reference to the random element.","Returns the secret part of this keypair.","","","","","","","","","","","","","Feldman’s verifiable secret sharing (VSS) for ElGamal …","","","","","Serializes this decryption into bytes.","Serializes this ciphertext as two group elements (the …","Serializes this proof into bytes. As described above, the …","Serializes this proof into bytes. As described above, the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the exclusive upper bound of the range presentable …","Verifies this as decryption for <code>ciphertext</code> under <code>key</code> using …","Errors","Verifies this proof.","Verifies this proof against the provided partial …","Verifies this proof against the provided <code>public_keys</code>.","Verifies this proof against <code>ciphertext</code> for <code>receiver</code> and …","Verifies a proof of encryption correctness of a boolean …","Verifies <code>proof</code> that <code>ciphertext</code> encrypts a value lying in …","Verifies that this is an encryption of a zero value.","","","","","","","","","","","","","","","","","","","Represents encryption of zero value without the blinding …","Actual size of the collection.","Human-readable collection name, such as “public keys”.","Expected size of the collection.","Parameters of an <code>EncryptedChoice</code> polling.","Error verifying an <code>EncryptedChoice</code>.","Error verifying the proof of equivalence for credits.","Error verifying a <code>RangeProof</code> for credits.","Zero or more encrypted choices from <code>n</code> options (<code>n &gt;= 1</code>) …","Multi-choice setup for <code>EncryptedChoice</code>, in which it can …","Mismatch between expected and actual number of options in …","Mismatch between expected and actual number of options in …","Produced / verified proofs.","Encapsulation of functionality for proving and verifying …","Encrypted ballot for quadratic voting together with …","Errors that can occur when verifying <code>QuadraticVotingBallot</code>…","Quadratic voting parameters prepared for a certain <code>Group</code>.","Error verifying <code>EncryptedChoice::range_proof()</code>.","Single-choice setup for <code>EncryptedChoice</code>, in which it can …","Error verifying <code>EncryptedChoice::sum_proof()</code>.","Error verifying a <code>RangeProof</code> for a vote for a particular …","","","","","","","","","","","","","","","","","Returns ciphertexts for all options <strong>without</strong> checking the …","","","","","","","","","","","","","Returns the number of credits per ballot.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the number of encrypted choices. This value is …","Returns the maximum number of votes per option.","Creates parameters for a multi-choice polling.","Creates an encrypted multi-choice.","Creates new parameters for the specified number of <code>credits</code> …","Creates a ballot based on the provided parameters and voter…","Returns the number of options in these parameters.","Returns the number of options.","Returns the range proof for the choice ciphertexts.","Returns the public key for which the <code>EncryptedChoice</code> are …","Returns the public key for which the <code>QuadraticVotingBallot</code>…","","","Sets the maximum number of votes per option.","Creates parameters for a single-choice polling.","Creates a new encrypted choice.","","","Returns the sum proof for the choice ciphertexts.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies the zero-knowledge proofs in this choice and …","Verifies this ballot against the provided parameters.","","","","","","","","","Actual number of options.","Expected number of options.","Actual number of options.","Error that occurred during range proof verification.","Expected number of options.","Zero-based option index.","Secret share for this participant was already provided.","Errors that can occur during the distributed key …","Public shares obtained from accumulated public polynomial …","Provided commitment does not correspond to the party’s …","Secret received from the party does not correspond to …","Provided proof of possession or public polynomial is …","Opening for a hash commitment used in Pedersen’s …","Participant state during the first stage of the committed …","Participant state during the second stage of the committed …","Participant state during the third and final stage of the …","Public participant information in the distributed key …","","","","","","","","","","","","","","","","","","","","","","","Returns the commitment of participant’s share of the …","Completes the distributed key generation protocol …","","","","","","Proceeds to the next step of the DKG protocol, in which …","Proceeds to the next step of the DKG protocol, in which …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns 0-based index of this participant.","Returns 0-based index of this participant.","Returns 0-based index of this participant.","Inserts a commitment from the participant with index …","Inserts public polynomial from participant with index …","Inserts a secret share from participant with index …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this information to the owned form.","Returns indices of parties whose commitments were not …","Returns the indices of parties whose public polynomials …","Returns indices of parties whose secret shares were not …","Instantiates a distributed key generation participant.","Opening for the participant’s key commitment.","Returns params of this threshold ElGamal encryption scheme.","Returns params of this threshold ElGamal encryption scheme.","Returns params of this threshold ElGamal encryption scheme.","Participant’s public polynomial.","Proof of possession for the secret polynomial that …","Returns public participant information: participant’s …","Returns the secret share for a participant with the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Prime-order subgroup of Curve25519 without any transforms …","Byte size of a serialized <code>Self::Element</code>.","Element of the group. Arithmetic operations requested here …","Helper trait for <code>Group</code> that describes operations on group …","Generic <code>Group</code> implementation for elliptic curves defined …","Prime-order group in which the discrete log problem and …","Provides an arbitrary number of random bytes.","Ristretto transform of Curve25519, also known as …","Byte size of a serialized <code>Self::Scalar</code>.","Scalar type. As per <code>Group</code> contract, scalars must form a …","Helper trait for <code>Group</code> that describes operations on group …","","","","","","","","","","","","","","","Deserializes an element from <code>buffer</code>, which is guaranteed …","","","","Deserializes the scalar from <code>buffer</code>, which is guaranteed …","","","","","","","","Writes random bytes into the specified buffer. As follows …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generates a random scalar based on the provided CSPRNG. …","","","","Returns the agreed-upon generator of the group.","","","","","","Returns the identity of the group (aka point at infinity …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Inverts the <code>scalar</code>, which is guaranteed to be non-zero. …","","","","Inverts scalars in a batch. This operation does not need …","","","Checks if the specified element is the identity.","","","","Multiplies the provided scalar by <code>ElementOps::generator()</code>. …","","","Multiplies provided <code>scalars</code> by <code>elements</code>. This operation …","","","Generates a scalar from a <code>source</code> of random bytes. This …","","","Serializes <code>element</code> into the provided <code>buffer</code>, which is …","","","","Serializes the scalar into the provided <code>buffer</code>, which is …","","","","","","","","","","","","","","","","","","","Calculates <code>k * k_element + r * G</code>, where <code>G</code> is the group …","","","Multiplies the provided scalar by <code>ElementOps::generator()</code>. …","","","Multiplies provided <code>scalars</code> by <code>elements</code>. Unlike …","","","","","","","Personalized state of a participant of a threshold ElGamal …","Dealer in a Feldman verifiable secret sharing scheme.","Errors that can occur during the secret sharing protocol.","Proof of possession supplied with the dealer’s public …","Secret received from the dealer does not correspond to …","Public polynomial received from the dealer is malformed.","Participants’ public keys do not correspond to a single …","Parameters of a threshold ElGamal encryption scheme.","Number of participants specified in <code>Params</code> does not match …","Full public information about the participants of a …","","","","","","","","","","","","","","","","","","","Combines shares decrypting the specified <code>ciphertext</code>. The …","Creates a <code>VerifiableDecryption</code> for the specified <code>ciphertext</code>…","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a key set from the parameters and public keys of …","Returns 0-based index of this participant.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the public key set for the threshold ElGamal …","Creates an instance based on information provided by the …","Instantiates a dealer.","Creates the participant state based on readily available …","Creates new parameters.","Returns parameters for this scheme.","Returns the public key of a participant with the specified …","Returns the slice with all participants’ public keys.","Generates a <code>ProofOfPossession</code> of the participant’s …","Returns public participant information: dealer’s public …","Returns share of the public key for this participant.","Returns share of the secret key for this participant. This …","Returns a secret share for a participant with the …","","","","","Returns the shared public key used in this scheme.","Total number of shares / participants.","","Number of participants necessary to jointly restore the …","","","","","","","","","","","","","","","","","","","","","Verifies a proof of possession of the participant’s …","Verifies a candidate decryption share for <code>ciphertext</code> …","","","","",""],"i":[0,33,0,0,0,0,12,12,12,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,2,4,0,3,3,7,4,2,3,8,7,10,4,11,32,12,13,14,15,16,17,18,19,20,33,2,3,8,7,10,4,11,32,12,13,14,15,16,17,18,19,20,33,2,3,8,7,10,4,11,12,13,14,15,16,17,18,19,20,2,3,8,7,10,4,11,12,13,14,15,16,17,18,19,20,18,2,7,2,7,2,3,8,7,10,4,13,14,15,16,19,20,0,2,3,3,3,3,3,3,17,2,2,3,8,7,10,4,11,32,12,12,13,14,15,16,17,17,18,19,20,33,33,2,3,3,8,8,7,10,10,4,4,11,32,12,13,14,15,16,17,18,18,19,20,33,2,3,10,14,20,19,32,2,8,11,0,32,2,3,8,7,10,4,11,32,12,13,14,15,16,17,18,19,20,33,8,10,2,2,3,3,8,4,4,4,7,11,32,13,14,15,16,19,4,17,17,8,4,8,2,3,8,7,10,4,13,14,15,16,19,20,0,2,4,2,4,7,4,14,20,2,3,8,7,10,4,11,12,13,14,15,16,17,18,19,20,12,17,33,2,3,8,7,10,4,11,32,12,13,14,15,16,17,18,19,20,33,2,3,8,7,10,4,11,32,12,13,14,15,16,17,18,19,20,33,2,3,8,7,10,4,11,32,12,13,14,15,16,17,18,19,20,33,17,10,13,14,15,16,19,3,3,3,2,3,8,7,10,4,11,32,12,13,14,15,16,17,18,19,20,33,4,71,71,71,0,0,50,50,0,0,49,50,42,0,0,0,0,49,0,49,50,44,45,46,43,49,47,48,50,44,45,46,43,49,47,48,50,43,44,45,46,43,47,48,44,45,46,43,47,48,47,43,48,44,45,46,43,49,49,47,48,50,50,44,45,46,43,49,47,48,50,44,45,46,43,49,47,48,50,43,47,46,43,47,48,46,47,43,46,47,43,48,47,46,43,49,50,43,44,45,46,43,47,48,49,50,44,45,46,43,49,47,48,50,44,45,46,43,49,47,48,50,44,45,46,43,49,47,48,50,43,48,44,45,46,43,49,47,48,50,72,72,73,74,73,74,60,0,60,60,60,60,0,0,0,0,0,60,53,54,55,56,57,60,53,54,55,56,57,53,54,55,56,57,53,54,55,56,57,54,57,53,54,55,56,57,54,56,60,60,53,54,55,56,57,60,53,54,55,56,57,54,56,57,54,56,57,60,53,54,55,56,57,55,54,56,57,54,55,54,56,57,55,55,56,57,53,54,55,56,57,60,53,54,55,56,57,60,60,53,54,55,56,57,60,53,54,55,56,57,60,53,54,55,56,57,60,53,54,55,56,57,0,75,75,0,0,0,0,0,76,76,0,65,62,63,64,65,62,63,64,62,63,64,62,63,64,75,62,63,64,76,62,63,64,62,64,62,64,65,65,62,63,64,65,62,63,64,76,62,63,64,75,62,63,64,62,64,75,62,63,64,65,62,63,64,76,62,63,64,76,62,64,75,62,63,64,1,62,64,1,62,64,76,62,64,75,62,63,64,76,62,63,64,62,63,64,65,62,63,64,65,62,63,64,65,62,63,64,1,62,64,1,62,64,1,62,64,65,62,63,64,0,0,0,70,70,70,70,0,70,0,68,69,59,70,61,68,69,59,70,61,68,69,59,61,68,69,59,61,61,59,68,69,59,61,61,61,68,69,59,70,70,61,68,69,59,70,61,68,59,68,69,59,70,61,59,68,69,59,61,68,68,68,59,69,59,59,69,68,69,59,61,68,61,70,61,68,69,59,61,70,68,69,59,70,61,68,69,59,70,61,68,69,59,70,61,68,68,68,69,59,70,61],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[3,[1]],[3,[1]]],[[3,[1]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[2,[1]],[2,[1]]]],[[[4,[1]],[4,[1]]]],0,[[[3,[1]]],[[6,[5]]]],[[[3,[1]]]],[[[7,[1]]]],[[[4,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[3,[1]]],[[3,[1]]]],[[[8,[1]]],[[8,[1]]]],[[[7,[[0,[9,1]]]]],[[7,[[0,[9,1]]]]]],[[[10,[[0,[9,1]]]]],[[10,[[0,[9,1]]]]]],[[[4,[[0,[9,1]]]]],[[4,[[0,[9,1]]]]]],[[[11,[[0,[9,1]]]]],[[11,[[0,[9,1]]]]]],[12,12],[[[13,[[0,[9,1]]]]],[[13,[[0,[9,1]]]]]],[[[14,[[0,[9,1]]]]],[[14,[[0,[9,1]]]]]],[[[15,[[0,[9,1]]]]],[[15,[[0,[9,1]]]]]],[[[16,[[0,[9,1]]]]],[[16,[[0,[9,1]]]]]],[17,17],[[[18,[[0,[9,1]]]]],[[18,[[0,[9,1]]]]]],[[[19,[[0,[9,1]]]]],[[19,[[0,[9,1]]]]]],[[[20,[[0,[9,1]]]]],[[20,[[0,[9,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[18,[1]]],17],[[[2,[1]],[4,[1]],[11,[1]]],[[22,[21]]]],[[[7,[1]],[4,[1]],[11,[1]]],[[22,[21]]]],[[[2,[1]],[4,[1]]]],[[[7,[1]],[4,[1]]]],[23,[[24,[[2,[1]]]]]],[23,[[24,[[3,[1]]]]]],[23,[[24,[[8,[1]]]]]],[23,[[24,[[7,[1]]]]]],[23,[[24,[[10,[1]]]]]],[23,[[24,[[4,[1]]]]]],[23,[[24,[[13,[1]]]]]],[23,[[24,[[14,[1]]]]]],[23,[[24,[[15,[1]]]]]],[23,[[24,[[16,[1]]]]]],[23,[[24,[[19,[1]]]]]],[23,[[24,[[20,[1]]]]]],0,[[[2,[1]]]],[[[3,[1]],[0,[25,26]]],[[4,[1]]]],[[[3,[1]],27,[0,[25,26]]]],[[[3,[1]],[0,[25,26]]],[[4,[1]]]],[[[3,[1]],[18,[1]],21,[0,[25,26]]]],[[[3,[1]],[0,[25,26]]]],[[[3,[1]],[3,[1]]],27],[[17,17],27],[[[2,[1]]]],[[[2,[1]],28],29],[[[3,[1]],28],29],[[[8,[1]],28],29],[[[7,[[0,[30,1]]]],28],29],[[[10,[[0,[30,1]]]],28],29],[[[4,[1]],28],29],[[[11,[[0,[30,1]]]],28],29],[[[32,[[0,[30,1]],[0,[30,31]]]],28],29],[[12,28],29],[[12,28],29],[[[13,[[0,[30,1]]]],28],29],[[[14,[[0,[30,1]]]],28],29],[[[15,[[0,[30,1]]]],28],29],[[[16,[[0,[30,1]]]],28],29],[[17,28],29],[[17,28],29],[[[18,[[0,[30,1]]]],28],29],[[[19,[[0,[30,1]]]],28],29],[[[20,[[0,[30,1]]]],28],29],[[33,28],29],[[33,28],29],[[]],[[]],[[[2,[1]]],[[3,[1]]]],[[]],[[[2,[1]]],[[8,[1]]]],[[]],[[[7,[1]]],[[10,[1]]]],[[]],[[]],[[[32,[1,31]]],[[4,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,[[18,[1]]]],[[]],[[]],[[]],[[]],[[[6,[5]]],[[22,[[2,[1]]]]]],[[[6,[5]]],[[24,[[3,[1]],12]]]],[[[6,[5]]],[[22,[[10,[1]]]]]],[[[6,[5]]],[[22,[[14,[1]]]]]],[[[6,[5]]],[[22,[[20,[1]]]]]],[[[3,[1]],[18,[1]],[32,[1,21]],34,[0,[26,25]]],[[19,[1]]]],[[[32,[1,[0,[35,31]]]]],[[32,[1]]]],[[[0,[25,26]]],[[2,[1]]]],[[[0,[26,25]]],[[8,[1]]]],[[[11,[1]]],[[22,[21]]]],0,[[[32,[1,31]]],[[4,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[1]]]],[[[10,[1]]],[[7,[1]]]],[[[2,[1]]],[[2,[1]]]],[[[2,[1]]],[[2,[1]]]],[[[3,[1]],21],[[3,[1]]]],[[[3,[1]]],[[3,[1]]]],[[[8,[1]]],[[8,[1]]]],[[[4,[1]]],[[4,[1]]]],[[[4,[1]],21],[[4,[1]]]],[[[4,[1]]]],[[[4,[1]],[8,[1]],34,[0,[25,26]]]],[36,[[11,[1]]]],[[[0,[35,31]],[3,[1]],[0,[25,26]]],[[32,[1,[0,[35,31]]]]]],[[[32,[1]],[3,[1]],[2,[1]],34,[0,[26,25]]]],[[[3,[1]],[2,[1]],34,[0,[25,26]]],[[14,[1]]]],[[37,[32,[1]],[3,[1]],34,[0,[26,25]]],[[15,[1]]]],[[[6,[[8,[1]]]],34,[0,[25,26]]],[[16,[1]]]],[[[3,[1]],[18,[1]],21,34,[0,[26,25]]]],[[],[[4,[1]]]],[21,17],[17,21],[[[8,[1]]],[[3,[1]]]],[[[4,[1]]]],[[[8,[1]]],[[2,[1]]]],[[[2,[1]],38],24],[[[3,[1]],38],24],[[[8,[1]],38],24],[[[7,[1]],38],24],[[[10,[1]],38],24],[[[4,[1]],38],24],[[[13,[1]],38],24],[[[14,[1]],38],24],[[[15,[1]],38],24],[[[16,[1]],38],24],[[[19,[1]],38],24],[[[20,[1]],38],24],0,[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[2,[1]],[2,[1]]]],[[[4,[1]],[4,[1]]]],[[[7,[1]]],[[39,[5]]]],[[[4,[1]]],[[39,[5]]]],[[[14,[1]]],[[39,[5]]]],[[[20,[1]]],[[39,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],40],[[],40],[[],40],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[17,21],[[[10,[1]],[4,[1]],[3,[1]],[14,[1]],34],[[24,[[7,[1]],33]]]],[[[13,[1]],[4,[1]],[3,[1]],34],[[24,[33]]]],[[[14,[1]],[3,[1]],34],[[24,[33]]]],[[[15,[1]],[0,[37,9]],[4,[1]],[3,[1]],34],[[24,[33]]]],[[[16,[1]],[0,[37,9]],34],[[24,[33]]]],[[[19,[1]],[3,[1]],[18,[1]],[4,[1]],34],[[24,[33]]]],[[[3,[1]],[4,[1]],[20,[1]]],[[24,[33]]]],[[[3,[1]],[18,[1]],[4,[1]],[19,[1]]],[[24,[33]]]],[[[3,[1]],[4,[1]],[14,[1]]],[[24,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[4,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[43,[1,[42,[1]]]]],[[6,[[4,[1]]]]]],[44,44],[45,45],[[[46,[1,[42,[1]]]]],[[46,[1,[42,[1]]]]]],[[[43,[[0,[9,1]],[0,[9,[42,[[0,[9,1]]]]]]]]],[[43,[[0,[9,1]],[0,[9,[42,[[0,[9,1]]]]]]]]]],[[[47,[[0,[9,1]]]]],[[47,[[0,[9,1]]]]]],[[[48,[[0,[9,1]]]]],[[48,[[0,[9,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[47,[1]]],21],[23,[[24,[[43,[1,[42,[1]]]]]]]],[23,[[24,[[48,[1]]]]]],[[44,28],29],[[45,28],29],[[[46,[[0,[30,1]],[0,[30,[42,[[0,[30,1]]]]]]]],28],29],[[[43,[[0,[30,1]],[0,[30,[42,[[0,[30,1]]]]]]]],28],29],[[49,28],29],[[49,28],29],[[[47,[[0,[30,1]]]],28],29],[[[48,[[0,[30,1]]]],28],29],[[50,28],29],[[50,28],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[43,[1,[42,[1]]]]],51],[[[47,[1]]],21],[[[3,[1]],51],[[46,[1,45]]]],[[[46,[1,[42,[1]]]],[6,[27]],[0,[25,26]]],[[43,[1,[42,[1]]]]]],[[[3,[1]],51,21],[[47,[1]]]],[[[47,[1]],[6,[21]],[0,[25,26]]],[[48,[1]]]],[[[46,[1,[42,[1]]]]],51],[[[47,[1]]],51],[[[43,[1,[42,[1]]]]],[[20,[1]]]],[[[46,[1,[42,[1]]]]],[[3,[1]]]],[[[47,[1]]],[[3,[1]]]],[[[43,[1,[42,[1]]]],38],24],[[[48,[1]],38],24],[[[47,[1]],21]],[[[3,[1]],51],[[46,[1,44]]]],[[[46,[1,44]],51,[0,[25,26]]],[[43,[1,44]]]],[49,[[22,[52]]]],[50,[[22,[52]]]],[[[43,[1,[42,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],40],[[],40],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[[43,[1,[42,[1]]]],[46,[1,[42,[1]]]]],[[24,[[6,[[4,[1]]]],49]]]],[[[48,[1]],[47,[1]]],[[24,[37,50]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[53,53],[[[54,[[0,[9,1]]]]],[[54,[[0,[9,1]]]]]],[[[55,[[0,[9,1]]]]],[[55,[[0,[9,1]]]]]],[[[56,[[0,[9,1]]]]],[[56,[[0,[9,1]]]]]],[[[57,[[0,[9,1]]]]],[[57,[[0,[9,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[[54,[1]]],[[58,[5]]]],[[[57,[1]]],[[24,[[59,[1]],60]]]],[23,[[24,[53]]]],[23,[[24,[[54,[1]]]]]],[23,[[24,[[55,[1]]]]]],[23,[[24,[[56,[1]]]]]],[23,[[24,[[57,[1]]]]]],[[[54,[1]]],[[56,[1]]]],[[[56,[1]]],[[57,[1]]]],[[60,28],29],[[60,28],29],[[53,28],29],[[[54,[[0,[30,1]]]],28],29],[[[55,[[0,[30,1]]]],28],29],[[[56,[[0,[30,1]]]],28],29],[[[57,[[0,[30,1]]]],28],29],[[]],[[]],[[]],[[]],[[]],[[]],[[[54,[1]]],51],[[[56,[1]]],51],[[[57,[1]]],51],[[[54,[1]],51,[58,[5]]]],[[[56,[1]],51,[55,[1]]],[[24,[60]]]],[[[57,[1]],51,[2,[1]]],[[24,[60]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[55,[1]]],[[55,[1]]]],[[[54,[1]]],37],[[[56,[1]]],37],[[[57,[1]]],37],[[61,51,[0,[25,26]]],[[54,[1]]]],0,[[[54,[1]]],61],[[[56,[1]]],61],[[[57,[1]]],61],0,0,[[[56,[1]]],[[55,[1]]]],[[[57,[1]],51],[[2,[1]]]],[[53,38],24],[[[54,[1]],38],24],[[[55,[1]],38],24],[[[56,[1]],38],24],[[[57,[1]],38],24],[60,[[22,[52]]]],[[]],[[]],[[]],[[]],[[]],[[],40],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[62,62],[63,63],[64,64],[[]],[[]],[[]],[[[6,[5]]],22],[[[6,[5]]],22],[[[6,[5]]],22],[[[6,[5]]],22],[[[6,[5]]],22],[[[6,[5]]],22],[[[6,[5]]],22],[[[6,[5]]],22],[[62,62],27],[[64,64],27],[[],27],[[],27],[[65,[6,[5]]]],[[65,28],29],[[62,28],29],[[[63,[30]],28],29],[[64,28],29],[[]],[[]],[[]],[[]],[[[0,[25,26]]]],[[[0,[25,26]]]],[[[0,[25,26]]]],[[[0,[25,26]]]],[[]],[[]],[[]],[[]],[[62,66]],[[64,66]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6],[6],[6],[[],27],[[],27],[[],27],[[],27],[[]],[67],[67],[[36,36]],[[36,36]],[[36,36]],[65],[65],[65],[[[6,[5]]]],[[[6,[5]]]],[[[6,[5]]]],[[[6,[5]]]],[[[6,[5]]]],[[[6,[5]]]],[[[6,[5]]]],[[[6,[5]]]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],41],[[],41],[[],41],[[],41],[[]],[[67,67]],[[67,67]],[[]],[67],[67],[[36,36]],[[36,36]],[[36,36]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[68,[[0,[9,1]]]]],[[68,[[0,[9,1]]]]]],[[[69,[[0,[9,1]]]]],[[69,[[0,[9,1]]]]]],[[[59,[[0,[9,1]]]]],[[59,[[0,[9,1]]]]]],[61,61],[[]],[[]],[[]],[[]],[[61,36],[[22,[[7,[1]]]]]],[[[59,[1]],[4,[1]],[0,[25,26]]]],[23,[[24,[[68,[1]]]]]],[23,[[24,[[69,[1]]]]]],[23,[[24,[[59,[1]]]]]],[23,[[24,[61]]]],[[61,61],27],[[],27],[[[68,[[0,[30,1]]]],28],29],[[[69,[[0,[30,1]]]],28],29],[[[59,[[0,[30,1]]]],28],29],[[70,28],29],[[70,28],29],[[61,28],29],[[]],[[]],[[]],[[]],[[]],[[61,[39,[[3,[1]]]]],[[24,[[68,[1]],70]]]],[[[59,[1]]],51],[[]],[[]],[[]],[[]],[[]],[[[59,[1]]],[[68,[1]]]],[[61,39,[16,[1]]],[[24,[[68,[1]],70]]]],[[61,[0,[25,26]]],[[69,[1]]]],[[[68,[1]],51,[2,[1]]],[[24,[[59,[1]],70]]]],[[51,51],61],[[[68,[1]]],61],[[[68,[1]],51],[[22,[[3,[1]]]]]],[[[68,[1]]],[[6,[[3,[1]]]]]],[[[59,[1]],[0,[25,26]]],[[16,[1]]]],[[[69,[1]]]],[[[59,[1]]],[[3,[1]]]],[[[59,[1]]],[[2,[1]]]],[[[69,[1]],51],[[2,[1]]]],[[[68,[1]],38],24],[[[69,[1]],38],24],[[[59,[1]],38],24],[[61,38],24],[[[68,[1]]],[[3,[1]]]],0,[70,[[22,[52]]]],0,[[]],[[]],[[]],[[]],[[],40],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],41],[[],41],[[],41],[[],41],[[],41],[[[68,[1]],51,[16,[1]]],[[24,[33]]]],[[[68,[1]],[10,[1]],[4,[1]],51,[14,[1]]],[[24,[[7,[1]],33]]]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[8,"Group",611],[3,"SecretKey",0],[3,"PublicKey",0],[3,"Ciphertext",0],[15,"u8"],[15,"slice"],[3,"VerifiableDecryption",0],[3,"Keypair",0],[8,"Clone",833],[3,"CandidateDecryption",0],[3,"DiscreteLogTable",0],[4,"PublicKeyConversionError",0],[3,"CommitmentEquivalenceProof",0],[3,"LogEqualityProof",0],[3,"SumOfSquaresProof",0],[3,"ProofOfPossession",0],[3,"RangeDecomposition",0],[3,"PreparedRange",0],[3,"RangeProof",0],[3,"RingProof",0],[15,"u64"],[4,"Option",834],[8,"Deserializer",835],[4,"Result",836],[8,"CryptoRng",837],[8,"RngCore",837],[15,"bool"],[3,"Formatter",838],[6,"Result",838],[8,"Debug",838],[8,"Zeroize",839],[3,"CiphertextWithValue",0],[4,"VerificationError",0],[3,"Transcript",840],[8,"Copy",841],[8,"IntoIterator",842],[8,"Iterator",843],[8,"Serializer",844],[3,"Vec",845],[3,"String",846],[3,"TypeId",847],[8,"ProveSum",353],[3,"EncryptedChoice",353],[3,"SingleChoice",353],[3,"MultiChoice",353],[3,"ChoiceParams",353],[3,"QuadraticVotingParams",353],[3,"QuadraticVotingBallot",353],[4,"ChoiceVerificationError",353],[4,"QuadraticVotingError",353],[15,"usize"],[8,"Error",848],[3,"Opening",495],[3,"ParticipantCollectingCommitments",495],[3,"PublicInfo",495],[3,"ParticipantCollectingPolynomials",495],[3,"ParticipantExchangingSecrets",495],[15,"array"],[3,"ActiveParticipant",731],[4,"Error",495],[3,"Params",731],[3,"Curve25519Subgroup",611],[3,"Generic",611],[3,"Ristretto",611],[3,"RandomBytesProvider",611],[8,"Hasher",849],[3,"Scalar",850],[3,"PublicKeySet",731],[3,"Dealer",731],[4,"Error",731],[13,"LenMismatch",350],[13,"OptionsLenMismatch",489],[13,"OptionsLenMismatch",491],[13,"Variant",491],[8,"ElementOps",611],[8,"ScalarOps",611]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
